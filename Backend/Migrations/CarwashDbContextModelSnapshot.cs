// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using carwash.Data;

#nullable disable

namespace carwash.Migrations
{
    [DbContext(typeof(CarwashDbContext))]
    partial class CarwashDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("carwash.Models.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("int");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("carwash.Models.Domain.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("carwash.Models.Domain.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("carwash.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("CustId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PromoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WashRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WasherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.HasIndex("PromoId");

                    b.HasIndex("WashRequestId");

                    b.HasIndex("WasherId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("carwash.Models.Domain.PromoCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("MinVal")
                        .HasColumnType("int");

                    b.Property<string>("Promo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("carwash.Models.Domain.RatingReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WashReqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WasherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.HasIndex("WashReqId");

                    b.HasIndex("WasherId");

                    b.ToTable("RatingReviews");
                });

            modelBuilder.Entity("carwash.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("carwash.Models.Domain.WashRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WashType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WasherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustId");

                    b.HasIndex("PackageId");

                    b.HasIndex("WasherId");

                    b.ToTable("WashRequests");
                });

            modelBuilder.Entity("carwash.Models.Domain.Address", b =>
                {
                    b.HasOne("carwash.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("carwash.Models.Domain.Car", b =>
                {
                    b.HasOne("carwash.Models.Domain.User", "Customer")
                        .WithMany("Cars")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("carwash.Models.Domain.Payment", b =>
                {
                    b.HasOne("carwash.Models.Domain.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.PromoCode", "PromoCode")
                        .WithMany("Payments")
                        .HasForeignKey("PromoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.WashRequest", "WashRequest")
                        .WithMany()
                        .HasForeignKey("WashRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.User", "Washer")
                        .WithMany("Payments")
                        .HasForeignKey("WasherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PromoCode");

                    b.Navigation("WashRequest");

                    b.Navigation("Washer");
                });

            modelBuilder.Entity("carwash.Models.Domain.RatingReview", b =>
                {
                    b.HasOne("carwash.Models.Domain.User", "Customer")
                        .WithMany("RatingReviews")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.WashRequest", "WashRequest")
                        .WithMany()
                        .HasForeignKey("WashReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.User", "Washer")
                        .WithMany()
                        .HasForeignKey("WasherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("WashRequest");

                    b.Navigation("Washer");
                });

            modelBuilder.Entity("carwash.Models.Domain.WashRequest", b =>
                {
                    b.HasOne("carwash.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.Car", "Car")
                        .WithMany("WashRequests")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.User", "Customer")
                        .WithMany("WashRequests")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.Package", "PackageNavigation")
                        .WithMany("WashRequests")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("carwash.Models.Domain.User", "Washer")
                        .WithMany()
                        .HasForeignKey("WasherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("PackageNavigation");

                    b.Navigation("Washer");
                });

            modelBuilder.Entity("carwash.Models.Domain.Car", b =>
                {
                    b.Navigation("WashRequests");
                });

            modelBuilder.Entity("carwash.Models.Domain.Package", b =>
                {
                    b.Navigation("WashRequests");
                });

            modelBuilder.Entity("carwash.Models.Domain.PromoCode", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("carwash.Models.Domain.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Payments");

                    b.Navigation("RatingReviews");

                    b.Navigation("WashRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
